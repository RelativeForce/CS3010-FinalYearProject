// Generated by purs version 0.12.5
"use strict";
var Assets_Sprites_ShotgunLeft_Sprite = require("../Assets.Sprites.ShotgunLeft.Sprite/index.js");
var Assets_Sprites_ShotgunRight_Sprite = require("../Assets.Sprites.ShotgunRight.Sprite/index.js");
var Constants = require("../Constants/index.js");
var Data_Bullet = require("../Data.Bullet/index.js");
var Data_Eq = require("../Data.Eq/index.js");
var Data_Int = require("../Data.Int/index.js");
var Emo8_Data_Sprite = require("../Emo8.Data.Sprite/index.js");
var Emo8_Utils = require("../Emo8.Utils/index.js");
var ShotgunLeft = (function () {
    function ShotgunLeft() {

    };
    ShotgunLeft.value = new ShotgunLeft();
    return ShotgunLeft;
})();
var ShotgunRight = (function () {
    function ShotgunRight() {

    };
    ShotgunRight.value = new ShotgunRight();
    return ShotgunRight;
})();
var updateShotgun = function (p) {
    var newShotgun = {
        sprite: Emo8_Data_Sprite.incrementFrame(p.sprite),
        shotCoolDown: (function () {
            var $7 = p.shotCoolDown > 0;
            if ($7) {
                return p.shotCoolDown - 1 | 0;
            };
            return 0;
        })(),
        angle: p.angle,
        appear: p.appear,
        pos: p.pos,
        shotCount: p.shotCount
    };
    return newShotgun;
};
var spriteBasedOnAppear = function (appear) {
    if (appear instanceof ShotgunLeft) {
        return Assets_Sprites_ShotgunLeft_Sprite.shotgunLeft;
    };
    if (appear instanceof ShotgunRight) {
        return Assets_Sprites_ShotgunRight_Sprite.shotgunRight;
    };
    throw new Error("Failed pattern match at Data.Gun.Shotgun (line 61, column 30 - line 63, column 35): " + [ appear.constructor.name ]);
};
var shotgunAppearEqual = new Data_Eq.Eq(function (v) {
    return function (v1) {
        if (v instanceof ShotgunLeft && v1 instanceof ShotgunLeft) {
            return true;
        };
        if (v instanceof ShotgunRight && v1 instanceof ShotgunRight) {
            return true;
        };
        return false;
    };
});
var reloadShotgun = function (p) {
    return {
        pos: p.pos,
        angle: p.angle,
        shotCoolDown: 0,
        shotCount: Constants.shotgunMagazineSize,
        appear: p.appear,
        sprite: p.sprite
    };
};
var canFire = function (p) {
    return p.shotCoolDown === 0 && p.shotCount > 0;
};
var bulletVelocity = function (angle) {
    var velocity = {
        xSpeed: Emo8_Utils.xComponent(angle)(Constants.bulletSpeed),
        ySpeed: Emo8_Utils.yComponent(angle)(Constants.bulletSpeed)
    };
    return velocity;
};
var bulletPosition = function (angle) {
    return function (pos) {
        return function (size) {
            var y = (function () {
                var $11 = Emo8_Utils.inLeftDirection(angle);
                if ($11) {
                    return (pos.y + size.height | 0) + Data_Int.floor(Emo8_Utils.yComponent(angle)(Data_Int.toNumber(size.width))) | 0;
                };
                return pos.y + Data_Int.floor(Emo8_Utils.yComponent(angle)(Data_Int.toNumber(size.width))) | 0;
            })();
            var x = (function () {
                var $12 = Emo8_Utils.inLeftDirection(angle);
                if ($12) {
                    return pos.x + Data_Int.floor(Emo8_Utils.xComponent(angle)(Data_Int.toNumber(size.width))) | 0;
                };
                return pos.x + Data_Int.floor(Emo8_Utils.xComponent(angle)(Data_Int.toNumber(size.width))) | 0;
            })();
            return {
                x: x,
                y: y
            };
        };
    };
};
var shotgunBullet = function (angle) {
    return function (pos) {
        return function (s) {
            var velocity = bulletVelocity(angle);
            var position = bulletPosition(angle)(pos)(s);
            var bullet = Data_Bullet.newBullet(position)(velocity);
            return bullet;
        };
    };
};
var fireAndUpdateShotgun = function (p) {
    var updatedShotgun = updateShotgun(p);
    var shotgunAndBullets = (function () {
        var v = canFire(p);
        if (v) {
            return {
                gun: {
                    shotCoolDown: Constants.shotgunShotCooldown,
                    shotCount: p.shotCount - 1 | 0,
                    angle: updatedShotgun.angle,
                    appear: updatedShotgun.appear,
                    pos: updatedShotgun.pos,
                    sprite: updatedShotgun.sprite
                },
                bullets: [ shotgunBullet(p.angle - 20 | 0)(p.pos)(p.sprite.size), shotgunBullet(p.angle - 10 | 0)(p.pos)(p.sprite.size), shotgunBullet(p.angle)(p.pos)(p.sprite.size), shotgunBullet(p.angle + 10 | 0)(p.pos)(p.sprite.size), shotgunBullet(p.angle + 20 | 0)(p.pos)(p.sprite.size) ]
            };
        };
        if (!v) {
            return {
                gun: updatedShotgun,
                bullets: [  ]
            };
        };
        throw new Error("Failed pattern match at Data.Gun.Shotgun (line 33, column 29 - line 44, column 58): " + [ v.constructor.name ]);
    })();
    return shotgunAndBullets;
};
var appearBasedOnAngle = function (angle) {
    var $14 = Emo8_Utils.inLeftDirection(angle);
    if ($14) {
        return ShotgunLeft.value;
    };
    return ShotgunRight.value;
};
var defaultShotgun = function (pos) {
    return function (angle) {
        var appear = appearBasedOnAngle(angle);
        var sprite = spriteBasedOnAppear(appear);
        var shotgun = {
            pos: pos,
            angle: angle,
            shotCoolDown: 0,
            shotCount: Constants.shotgunMagazineSize,
            appear: appear,
            sprite: sprite
        };
        return shotgun;
    };
};
var setShotgunPositionAndRotation = function (shotgun) {
    return function (pos) {
        return function (angle) {
            var newAppear = appearBasedOnAngle(angle);
            var newSprite = (function () {
                var $15 = Data_Eq.eq(shotgunAppearEqual)(newAppear)(shotgun.appear);
                if ($15) {
                    return shotgun.sprite;
                };
                return spriteBasedOnAppear(newAppear);
            })();
            var newShotgun = {
                pos: pos,
                angle: angle,
                sprite: newSprite,
                appear: newAppear,
                shotCoolDown: shotgun.shotCoolDown,
                shotCount: shotgun.shotCount
            };
            return newShotgun;
        };
    };
};
module.exports = {
    ShotgunLeft: ShotgunLeft,
    ShotgunRight: ShotgunRight,
    fireAndUpdateShotgun: fireAndUpdateShotgun,
    reloadShotgun: reloadShotgun,
    updateShotgun: updateShotgun,
    appearBasedOnAngle: appearBasedOnAngle,
    spriteBasedOnAppear: spriteBasedOnAppear,
    canFire: canFire,
    bulletVelocity: bulletVelocity,
    bulletPosition: bulletPosition,
    shotgunBullet: shotgunBullet,
    setShotgunPositionAndRotation: setShotgunPositionAndRotation,
    defaultShotgun: defaultShotgun,
    shotgunAppearEqual: shotgunAppearEqual
};
